// Generated by gencpp from file ramp_msgs/EvaluationResponse.msg
// DO NOT EDIT!


#ifndef RAMP_MSGS_MESSAGE_EVALUATIONRESPONSE_H
#define RAMP_MSGS_MESSAGE_EVALUATIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ramp_msgs
{
template <class ContainerAllocator>
struct EvaluationResponse_
{
  typedef EvaluationResponse_<ContainerAllocator> Type;

  EvaluationResponse_()
    : fitness(0.0)
    , feasible(false)
    , t_firstCollision()  {
    }
  EvaluationResponse_(const ContainerAllocator& _alloc)
    : fitness(0.0)
    , feasible(false)
    , t_firstCollision()  {
  (void)_alloc;
    }



   typedef double _fitness_type;
  _fitness_type fitness;

   typedef uint8_t _feasible_type;
  _feasible_type feasible;

   typedef ros::Duration _t_firstCollision_type;
  _t_firstCollision_type t_firstCollision;





  typedef boost::shared_ptr< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EvaluationResponse_

typedef ::ramp_msgs::EvaluationResponse_<std::allocator<void> > EvaluationResponse;

typedef boost::shared_ptr< ::ramp_msgs::EvaluationResponse > EvaluationResponsePtr;
typedef boost::shared_ptr< ::ramp_msgs::EvaluationResponse const> EvaluationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ramp_msgs::EvaluationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ramp_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ramp_msgs': ['/home/mason/Documents/evol_planner/src/packages/ramp_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f964edf11b680c3f41b2a601ea124cac";
  }

  static const char* value(const ::ramp_msgs::EvaluationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf964edf11b680c3fULL;
  static const uint64_t static_value2 = 0x41b2a601ea124cacULL;
};

template<class ContainerAllocator>
struct DataType< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_msgs/EvaluationResponse";
  }

  static const char* value(const ::ramp_msgs::EvaluationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 fitness\n\
bool feasible\n\
duration t_firstCollision\n\
";
  }

  static const char* value(const ::ramp_msgs::EvaluationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fitness);
      stream.next(m.feasible);
      stream.next(m.t_firstCollision);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EvaluationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ramp_msgs::EvaluationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ramp_msgs::EvaluationResponse_<ContainerAllocator>& v)
  {
    s << indent << "fitness: ";
    Printer<double>::stream(s, indent + "  ", v.fitness);
    s << indent << "feasible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feasible);
    s << indent << "t_firstCollision: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.t_firstCollision);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAMP_MSGS_MESSAGE_EVALUATIONRESPONSE_H
