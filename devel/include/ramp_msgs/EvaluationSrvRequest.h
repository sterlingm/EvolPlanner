// Generated by gencpp from file ramp_msgs/EvaluationSrvRequest.msg
// DO NOT EDIT!


#ifndef RAMP_MSGS_MESSAGE_EVALUATIONSRVREQUEST_H
#define RAMP_MSGS_MESSAGE_EVALUATIONSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ramp_msgs/EvaluationRequest.h>

namespace ramp_msgs
{
template <class ContainerAllocator>
struct EvaluationSrvRequest_
{
  typedef EvaluationSrvRequest_<ContainerAllocator> Type;

  EvaluationSrvRequest_()
    : reqs()  {
    }
  EvaluationSrvRequest_(const ContainerAllocator& _alloc)
    : reqs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> >::other >  _reqs_type;
  _reqs_type reqs;





  typedef boost::shared_ptr< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EvaluationSrvRequest_

typedef ::ramp_msgs::EvaluationSrvRequest_<std::allocator<void> > EvaluationSrvRequest;

typedef boost::shared_ptr< ::ramp_msgs::EvaluationSrvRequest > EvaluationSrvRequestPtr;
typedef boost::shared_ptr< ::ramp_msgs::EvaluationSrvRequest const> EvaluationSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ramp_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ramp_msgs': ['/home/mason/Documents/evol_planner/src/packages/ramp_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5f4358a97c363f83106d9ab74137f28";
  }

  static const char* value(const ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5f4358a97c363f8ULL;
  static const uint64_t static_value2 = 0x3106d9ab74137f28ULL;
};

template<class ContainerAllocator>
struct DataType< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_msgs/EvaluationSrvRequest";
  }

  static const char* value(const ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "EvaluationRequest[] reqs\n\
\n\
\n\
================================================================================\n\
MSG: ramp_msgs/EvaluationRequest\n\
RampTrajectory trajectory\n\
float64 robot_radius\n\
float64 currentTheta\n\
float64 theta_cc\n\
RampTrajectory[] obstacle_trjs\n\
CircleGroup[] obstacle_cir_groups\n\
bool imminent_collision\n\
float64 offset\n\
bool full_eval\n\
\n\
bool consider_trans\n\
bool trans_possible\n\
bool hmap_eval\n\
\n\
================================================================================\n\
MSG: ramp_msgs/RampTrajectory\n\
Header header\n\
uint16 id\n\
trajectory_msgs/JointTrajectory trajectory\n\
uint16[] i_knotPoints\n\
ramp_msgs/BezierCurve[] curves\n\
ramp_msgs/Path holonomic_path\n\
\n\
bool feasible\n\
float64 fitness\n\
\n\
duration t_firstCollision\n\
int8 i_subPopulation\n\
\n\
duration t_start\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectory\n\
Header header\n\
string[] joint_names\n\
JointTrajectoryPoint[] points\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
# Each trajectory point specifies either positions[, velocities[, accelerations]]\n\
# or positions[, effort] for the trajectory to be executed.\n\
# All specified values are in the same order as the joint names in JointTrajectory.msg\n\
\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
float64[] effort\n\
duration time_from_start\n\
\n\
================================================================================\n\
MSG: ramp_msgs/BezierCurve\n\
Header header\n\
\n\
ramp_msgs/MotionState[] points\n\
float64[] u_values\n\
\n\
ramp_msgs/MotionState[] segmentPoints\n\
ramp_msgs/MotionState[] controlPoints\n\
\n\
float64 l\n\
ramp_msgs/MotionState ms_maxVA\n\
ramp_msgs/MotionState ms_initialVA\n\
ramp_msgs/MotionState ms_begin\n\
float64 u_0\n\
float64 u_dot_0\n\
float64 u_dot_max\n\
float64 u_target\n\
\n\
================================================================================\n\
MSG: ramp_msgs/MotionState\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
float64[] jerks\n\
\n\
# change to duration\n\
float64 time\n\
\n\
================================================================================\n\
MSG: ramp_msgs/Path\n\
ramp_msgs/KnotPoint[] points\n\
\n\
================================================================================\n\
MSG: ramp_msgs/KnotPoint\n\
ramp_msgs/MotionState motionState\n\
uint32 stopTime\n\
\n\
================================================================================\n\
MSG: ramp_msgs/CircleGroup\n\
ramp_msgs/Circle fitCir\n\
ramp_msgs/Circle[] packedCirs\n\
\n\
================================================================================\n\
MSG: ramp_msgs/Circle\n\
geometry_msgs/Vector3 center\n\
float64 radius\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reqs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EvaluationSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ramp_msgs::EvaluationSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "reqs[]" << std::endl;
    for (size_t i = 0; i < v.reqs.size(); ++i)
    {
      s << indent << "  reqs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ramp_msgs::EvaluationRequest_<ContainerAllocator> >::stream(s, indent + "    ", v.reqs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAMP_MSGS_MESSAGE_EVALUATIONSRVREQUEST_H
