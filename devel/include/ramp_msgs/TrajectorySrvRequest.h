// Generated by gencpp from file ramp_msgs/TrajectorySrvRequest.msg
// DO NOT EDIT!


#ifndef RAMP_MSGS_MESSAGE_TRAJECTORYSRVREQUEST_H
#define RAMP_MSGS_MESSAGE_TRAJECTORYSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ramp_msgs/TrajectoryRequest.h>

namespace ramp_msgs
{
template <class ContainerAllocator>
struct TrajectorySrvRequest_
{
  typedef TrajectorySrvRequest_<ContainerAllocator> Type;

  TrajectorySrvRequest_()
    : reqs()  {
    }
  TrajectorySrvRequest_(const ContainerAllocator& _alloc)
    : reqs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> >::other >  _reqs_type;
  _reqs_type reqs;





  typedef boost::shared_ptr< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectorySrvRequest_

typedef ::ramp_msgs::TrajectorySrvRequest_<std::allocator<void> > TrajectorySrvRequest;

typedef boost::shared_ptr< ::ramp_msgs::TrajectorySrvRequest > TrajectorySrvRequestPtr;
typedef boost::shared_ptr< ::ramp_msgs::TrajectorySrvRequest const> TrajectorySrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ramp_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ramp_msgs': ['/home/mason/Documents/evol_planner/src/packages/ramp_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4482f86700b066be4ed8ea43c3afcfa6";
  }

  static const char* value(const ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4482f86700b066beULL;
  static const uint64_t static_value2 = 0x4ed8ea43c3afcfa6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ramp_msgs/TrajectorySrvRequest";
  }

  static const char* value(const ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "TrajectoryRequest[] reqs\n\
\n\
\n\
================================================================================\n\
MSG: ramp_msgs/TrajectoryRequest\n\
ramp_msgs/Path path\n\
uint8 type \n\
bool print\n\
ramp_msgs/BezierCurve[] bezierCurves\n\
int8 segments\n\
float64 max_speed_linear\n\
float64 max_speed_angular\n\
\n\
# For system-level test generation...\n\
bool sl_traj\n\
float64 sl_final_speed\n\
duration sl_init_dur\n\
duration sl_final_dur\n\
\n\
================================================================================\n\
MSG: ramp_msgs/Path\n\
ramp_msgs/KnotPoint[] points\n\
\n\
================================================================================\n\
MSG: ramp_msgs/KnotPoint\n\
ramp_msgs/MotionState motionState\n\
uint32 stopTime\n\
\n\
================================================================================\n\
MSG: ramp_msgs/MotionState\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
float64[] jerks\n\
\n\
# change to duration\n\
float64 time\n\
\n\
================================================================================\n\
MSG: ramp_msgs/BezierCurve\n\
Header header\n\
\n\
ramp_msgs/MotionState[] points\n\
float64[] u_values\n\
\n\
ramp_msgs/MotionState[] segmentPoints\n\
ramp_msgs/MotionState[] controlPoints\n\
\n\
float64 l\n\
ramp_msgs/MotionState ms_maxVA\n\
ramp_msgs/MotionState ms_initialVA\n\
ramp_msgs/MotionState ms_begin\n\
float64 u_0\n\
float64 u_dot_0\n\
float64 u_dot_max\n\
float64 u_target\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reqs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectorySrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ramp_msgs::TrajectorySrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "reqs[]" << std::endl;
    for (size_t i = 0; i < v.reqs.size(); ++i)
    {
      s << indent << "  reqs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ramp_msgs::TrajectoryRequest_<ContainerAllocator> >::stream(s, indent + "    ", v.reqs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAMP_MSGS_MESSAGE_TRAJECTORYSRVREQUEST_H
