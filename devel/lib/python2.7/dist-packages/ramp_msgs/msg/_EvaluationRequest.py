# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ramp_msgs/EvaluationRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import geometry_msgs.msg
import std_msgs.msg
import genpy
import ramp_msgs.msg

class EvaluationRequest(genpy.Message):
  _md5sum = "40e525bfb7e4a2a45b79429a4d3f00db"
  _type = "ramp_msgs/EvaluationRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """RampTrajectory trajectory
float64 robot_radius
float64 currentTheta
float64 theta_cc
RampTrajectory[] obstacle_trjs
CircleGroup[] obstacle_cir_groups
bool imminent_collision
float64 offset
bool full_eval

bool consider_trans
bool trans_possible
bool hmap_eval

================================================================================
MSG: ramp_msgs/RampTrajectory
Header header
uint16 id
trajectory_msgs/JointTrajectory trajectory
uint16[] i_knotPoints
ramp_msgs/BezierCurve[] curves
ramp_msgs/Path holonomic_path

bool feasible
float64 fitness

duration t_firstCollision
int8 i_subPopulation

duration t_start

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: ramp_msgs/BezierCurve
Header header

ramp_msgs/MotionState[] points
float64[] u_values

ramp_msgs/MotionState[] segmentPoints
ramp_msgs/MotionState[] controlPoints

float64 l
ramp_msgs/MotionState ms_maxVA
ramp_msgs/MotionState ms_initialVA
ramp_msgs/MotionState ms_begin
float64 u_0
float64 u_dot_0
float64 u_dot_max
float64 u_target

================================================================================
MSG: ramp_msgs/MotionState
float64[] positions
float64[] velocities
float64[] accelerations
float64[] jerks

# change to duration
float64 time

================================================================================
MSG: ramp_msgs/Path
ramp_msgs/KnotPoint[] points

================================================================================
MSG: ramp_msgs/KnotPoint
ramp_msgs/MotionState motionState
uint32 stopTime

================================================================================
MSG: ramp_msgs/CircleGroup
ramp_msgs/Circle fitCir
ramp_msgs/Circle[] packedCirs

================================================================================
MSG: ramp_msgs/Circle
geometry_msgs/Vector3 center
float64 radius

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['trajectory','robot_radius','currentTheta','theta_cc','obstacle_trjs','obstacle_cir_groups','imminent_collision','offset','full_eval','consider_trans','trans_possible','hmap_eval']
  _slot_types = ['ramp_msgs/RampTrajectory','float64','float64','float64','ramp_msgs/RampTrajectory[]','ramp_msgs/CircleGroup[]','bool','float64','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory,robot_radius,currentTheta,theta_cc,obstacle_trjs,obstacle_cir_groups,imminent_collision,offset,full_eval,consider_trans,trans_possible,hmap_eval

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvaluationRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.trajectory is None:
        self.trajectory = ramp_msgs.msg.RampTrajectory()
      if self.robot_radius is None:
        self.robot_radius = 0.
      if self.currentTheta is None:
        self.currentTheta = 0.
      if self.theta_cc is None:
        self.theta_cc = 0.
      if self.obstacle_trjs is None:
        self.obstacle_trjs = []
      if self.obstacle_cir_groups is None:
        self.obstacle_cir_groups = []
      if self.imminent_collision is None:
        self.imminent_collision = False
      if self.offset is None:
        self.offset = 0.
      if self.full_eval is None:
        self.full_eval = False
      if self.consider_trans is None:
        self.consider_trans = False
      if self.trans_possible is None:
        self.trans_possible = False
      if self.hmap_eval is None:
        self.hmap_eval = False
    else:
      self.trajectory = ramp_msgs.msg.RampTrajectory()
      self.robot_radius = 0.
      self.currentTheta = 0.
      self.theta_cc = 0.
      self.obstacle_trjs = []
      self.obstacle_cir_groups = []
      self.imminent_collision = False
      self.offset = 0.
      self.full_eval = False
      self.consider_trans = False
      self.trans_possible = False
      self.hmap_eval = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_H3I().pack(_x.trajectory.id, _x.trajectory.trajectory.header.seq, _x.trajectory.trajectory.header.stamp.secs, _x.trajectory.trajectory.header.stamp.nsecs))
      _x = self.trajectory.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.trajectory.trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.trajectory.trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.effort))
        _v1 = val1.time_from_start
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory.i_knotPoints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.trajectory.i_knotPoints))
      length = len(self.trajectory.curves)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.curves:
        _v2 = val1.header
        buff.write(_get_struct_I().pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.positions))
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.velocities))
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.accelerations))
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.jerks))
          buff.write(_get_struct_d().pack(val2.time))
        length = len(val1.u_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.u_values))
        length = len(val1.segmentPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.segmentPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.positions))
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.velocities))
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.accelerations))
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.jerks))
          buff.write(_get_struct_d().pack(val2.time))
        length = len(val1.controlPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.controlPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.positions))
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.velocities))
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.accelerations))
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.jerks))
          buff.write(_get_struct_d().pack(val2.time))
        buff.write(_get_struct_d().pack(val1.l))
        _v4 = val1.ms_maxVA
        length = len(_v4.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v4.positions))
        length = len(_v4.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v4.velocities))
        length = len(_v4.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v4.accelerations))
        length = len(_v4.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v4.jerks))
        buff.write(_get_struct_d().pack(_v4.time))
        _v5 = val1.ms_initialVA
        length = len(_v5.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v5.positions))
        length = len(_v5.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v5.velocities))
        length = len(_v5.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v5.accelerations))
        length = len(_v5.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v5.jerks))
        buff.write(_get_struct_d().pack(_v5.time))
        _v6 = val1.ms_begin
        length = len(_v6.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v6.positions))
        length = len(_v6.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v6.velocities))
        length = len(_v6.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v6.accelerations))
        length = len(_v6.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v6.jerks))
        buff.write(_get_struct_d().pack(_v6.time))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
      length = len(self.trajectory.holonomic_path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.holonomic_path.points:
        _v7 = val1.motionState
        length = len(_v7.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v7.positions))
        length = len(_v7.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v7.velocities))
        length = len(_v7.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v7.accelerations))
        length = len(_v7.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v7.jerks))
        buff.write(_get_struct_d().pack(_v7.time))
        buff.write(_get_struct_I().pack(val1.stopTime))
      _x = self
      buff.write(_get_struct_Bd2ib2i3d().pack(_x.trajectory.feasible, _x.trajectory.fitness, _x.trajectory.t_firstCollision.secs, _x.trajectory.t_firstCollision.nsecs, _x.trajectory.i_subPopulation, _x.trajectory.t_start.secs, _x.trajectory.t_start.nsecs, _x.robot_radius, _x.currentTheta, _x.theta_cc))
      length = len(self.obstacle_trjs)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_trjs:
        _v8 = val1.header
        buff.write(_get_struct_I().pack(_v8.seq))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_H().pack(val1.id))
        _v10 = val1.trajectory
        _v11 = _v10.header
        buff.write(_get_struct_I().pack(_v11.seq))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v10.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v10.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v10.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v10.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v13 = val3.time_from_start
          _x = _v13
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.i_knotPoints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sH'%length
        buff.write(struct.pack(pattern, *val1.i_knotPoints))
        length = len(val1.curves)
        buff.write(_struct_I.pack(length))
        for val2 in val1.curves:
          _v14 = val2.header
          buff.write(_get_struct_I().pack(_v14.seq))
          _v15 = _v14.stamp
          _x = _v15
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v14.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.positions))
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.velocities))
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.accelerations))
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.jerks))
            buff.write(_get_struct_d().pack(val3.time))
          length = len(val2.u_values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.u_values))
          length = len(val2.segmentPoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.segmentPoints:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.positions))
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.velocities))
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.accelerations))
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.jerks))
            buff.write(_get_struct_d().pack(val3.time))
          length = len(val2.controlPoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.controlPoints:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.positions))
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.velocities))
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.accelerations))
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.jerks))
            buff.write(_get_struct_d().pack(val3.time))
          buff.write(_get_struct_d().pack(val2.l))
          _v16 = val2.ms_maxVA
          length = len(_v16.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v16.positions))
          length = len(_v16.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v16.velocities))
          length = len(_v16.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v16.accelerations))
          length = len(_v16.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v16.jerks))
          buff.write(_get_struct_d().pack(_v16.time))
          _v17 = val2.ms_initialVA
          length = len(_v17.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v17.positions))
          length = len(_v17.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v17.velocities))
          length = len(_v17.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v17.accelerations))
          length = len(_v17.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v17.jerks))
          buff.write(_get_struct_d().pack(_v17.time))
          _v18 = val2.ms_begin
          length = len(_v18.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v18.positions))
          length = len(_v18.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v18.velocities))
          length = len(_v18.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v18.accelerations))
          length = len(_v18.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v18.jerks))
          buff.write(_get_struct_d().pack(_v18.time))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
        _v19 = val1.holonomic_path
        length = len(_v19.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.points:
          _v20 = val3.motionState
          length = len(_v20.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v20.positions))
          length = len(_v20.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v20.velocities))
          length = len(_v20.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v20.accelerations))
          length = len(_v20.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v20.jerks))
          buff.write(_get_struct_d().pack(_v20.time))
          buff.write(_get_struct_I().pack(val3.stopTime))
        _x = val1
        buff.write(_get_struct_Bd().pack(_x.feasible, _x.fitness))
        _v21 = val1.t_firstCollision
        _x = _v21
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_b().pack(val1.i_subPopulation))
        _v22 = val1.t_start
        _x = _v22
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.obstacle_cir_groups)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_cir_groups:
        _v23 = val1.fitCir
        _v24 = _v23.center
        _x = _v24
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_d().pack(_v23.radius))
        length = len(val1.packedCirs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.packedCirs:
          _v25 = val2.center
          _x = _v25
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_d().pack(val2.radius))
      _x = self
      buff.write(_get_struct_Bd4B().pack(_x.imminent_collision, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible, _x.hmap_eval))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.trajectory is None:
        self.trajectory = ramp_msgs.msg.RampTrajectory()
      if self.obstacle_trjs is None:
        self.obstacle_trjs = None
      if self.obstacle_cir_groups is None:
        self.obstacle_cir_groups = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trajectory.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.trajectory.id, _x.trajectory.trajectory.header.seq, _x.trajectory.trajectory.header.stamp.secs, _x.trajectory.trajectory.header.stamp.nsecs,) = _get_struct_H3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trajectory.trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trajectory.trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = struct.unpack(pattern, str[start:end])
        _v26 = val1.time_from_start
        _x = _v26
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.trajectory.trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory.i_knotPoints = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.curves = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.BezierCurve()
        _v27 = val1.header
        start = end
        end += 4
        (_v27.seq,) = _get_struct_I().unpack(str[start:end])
        _v28 = _v27.stamp
        _x = _v28
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v27.frame_id = str[start:end].decode('utf-8')
        else:
          _v27.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.u_values = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.segmentPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.segmentPoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.controlPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.controlPoints.append(val2)
        start = end
        end += 8
        (val1.l,) = _get_struct_d().unpack(str[start:end])
        _v29 = val1.ms_maxVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v29.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v29.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v29.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v29.jerks = struct.unpack(pattern, str[start:end])
        start = end
        end += 8
        (_v29.time,) = _get_struct_d().unpack(str[start:end])
        _v30 = val1.ms_initialVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v30.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v30.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v30.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v30.jerks = struct.unpack(pattern, str[start:end])
        start = end
        end += 8
        (_v30.time,) = _get_struct_d().unpack(str[start:end])
        _v31 = val1.ms_begin
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v31.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v31.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v31.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v31.jerks = struct.unpack(pattern, str[start:end])
        start = end
        end += 8
        (_v31.time,) = _get_struct_d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
        self.trajectory.curves.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.holonomic_path.points = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.KnotPoint()
        _v32 = val1.motionState
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v32.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v32.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v32.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v32.jerks = struct.unpack(pattern, str[start:end])
        start = end
        end += 8
        (_v32.time,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (val1.stopTime,) = _get_struct_I().unpack(str[start:end])
        self.trajectory.holonomic_path.points.append(val1)
      _x = self
      start = end
      end += 50
      (_x.trajectory.feasible, _x.trajectory.fitness, _x.trajectory.t_firstCollision.secs, _x.trajectory.t_firstCollision.nsecs, _x.trajectory.i_subPopulation, _x.trajectory.t_start.secs, _x.trajectory.t_start.nsecs, _x.robot_radius, _x.currentTheta, _x.theta_cc,) = _get_struct_Bd2ib2i3d().unpack(str[start:end])
      self.trajectory.feasible = bool(self.trajectory.feasible)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_trjs = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.RampTrajectory()
        _v33 = val1.header
        start = end
        end += 4
        (_v33.seq,) = _get_struct_I().unpack(str[start:end])
        _v34 = _v33.stamp
        _x = _v34
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v33.frame_id = str[start:end].decode('utf-8')
        else:
          _v33.frame_id = str[start:end]
        start = end
        end += 2
        (val1.id,) = _get_struct_H().unpack(str[start:end])
        _v35 = val1.trajectory
        _v36 = _v35.header
        start = end
        end += 4
        (_v36.seq,) = _get_struct_I().unpack(str[start:end])
        _v37 = _v36.stamp
        _x = _v37
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v36.frame_id = str[start:end].decode('utf-8')
        else:
          _v36.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v35.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v35.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v35.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v38 = val3.time_from_start
          _x = _v38
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v35.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sH'%length
        start = end
        end += struct.calcsize(pattern)
        val1.i_knotPoints = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.curves = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.BezierCurve()
          _v39 = val2.header
          start = end
          end += 4
          (_v39.seq,) = _get_struct_I().unpack(str[start:end])
          _v40 = _v39.stamp
          _x = _v40
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v39.frame_id = str[start:end].decode('utf-8')
          else:
            _v39.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.jerks = struct.unpack(pattern, str[start:end])
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.points.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.u_values = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.segmentPoints = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.jerks = struct.unpack(pattern, str[start:end])
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.segmentPoints.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.controlPoints = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.jerks = struct.unpack(pattern, str[start:end])
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.controlPoints.append(val3)
          start = end
          end += 8
          (val2.l,) = _get_struct_d().unpack(str[start:end])
          _v41 = val2.ms_maxVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v41.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v41.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v41.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v41.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (_v41.time,) = _get_struct_d().unpack(str[start:end])
          _v42 = val2.ms_initialVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v42.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v42.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v42.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v42.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (_v42.time,) = _get_struct_d().unpack(str[start:end])
          _v43 = val2.ms_begin
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v43.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v43.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v43.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v43.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (_v43.time,) = _get_struct_d().unpack(str[start:end])
          _x = val2
          start = end
          end += 32
          (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
          val1.curves.append(val2)
        _v44 = val1.holonomic_path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v44.points = []
        for i in range(0, length):
          val3 = ramp_msgs.msg.KnotPoint()
          _v45 = val3.motionState
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v45.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v45.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v45.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v45.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (_v45.time,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (val3.stopTime,) = _get_struct_I().unpack(str[start:end])
          _v44.points.append(val3)
        _x = val1
        start = end
        end += 9
        (_x.feasible, _x.fitness,) = _get_struct_Bd().unpack(str[start:end])
        val1.feasible = bool(val1.feasible)
        _v46 = val1.t_firstCollision
        _x = _v46
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (val1.i_subPopulation,) = _get_struct_b().unpack(str[start:end])
        _v47 = val1.t_start
        _x = _v47
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.obstacle_trjs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_cir_groups = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.CircleGroup()
        _v48 = val1.fitCir
        _v49 = _v48.center
        _x = _v49
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (_v48.radius,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.packedCirs = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.Circle()
          _v50 = val2.center
          _x = _v50
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (val2.radius,) = _get_struct_d().unpack(str[start:end])
          val1.packedCirs.append(val2)
        self.obstacle_cir_groups.append(val1)
      _x = self
      start = end
      end += 13
      (_x.imminent_collision, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible, _x.hmap_eval,) = _get_struct_Bd4B().unpack(str[start:end])
      self.imminent_collision = bool(self.imminent_collision)
      self.full_eval = bool(self.full_eval)
      self.consider_trans = bool(self.consider_trans)
      self.trans_possible = bool(self.trans_possible)
      self.hmap_eval = bool(self.hmap_eval)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_H3I().pack(_x.trajectory.id, _x.trajectory.trajectory.header.seq, _x.trajectory.trajectory.header.stamp.secs, _x.trajectory.trajectory.header.stamp.nsecs))
      _x = self.trajectory.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.trajectory.trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.trajectory.trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v51 = val1.time_from_start
        _x = _v51
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory.i_knotPoints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.trajectory.i_knotPoints.tostring())
      length = len(self.trajectory.curves)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.curves:
        _v52 = val1.header
        buff.write(_get_struct_I().pack(_v52.seq))
        _v53 = _v52.stamp
        _x = _v53
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v52.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.positions.tostring())
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.velocities.tostring())
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.accelerations.tostring())
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.jerks.tostring())
          buff.write(_get_struct_d().pack(val2.time))
        length = len(val1.u_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.u_values.tostring())
        length = len(val1.segmentPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.segmentPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.positions.tostring())
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.velocities.tostring())
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.accelerations.tostring())
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.jerks.tostring())
          buff.write(_get_struct_d().pack(val2.time))
        length = len(val1.controlPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.controlPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.positions.tostring())
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.velocities.tostring())
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.accelerations.tostring())
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.jerks.tostring())
          buff.write(_get_struct_d().pack(val2.time))
        buff.write(_get_struct_d().pack(val1.l))
        _v54 = val1.ms_maxVA
        length = len(_v54.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v54.positions.tostring())
        length = len(_v54.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v54.velocities.tostring())
        length = len(_v54.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v54.accelerations.tostring())
        length = len(_v54.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v54.jerks.tostring())
        buff.write(_get_struct_d().pack(_v54.time))
        _v55 = val1.ms_initialVA
        length = len(_v55.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v55.positions.tostring())
        length = len(_v55.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v55.velocities.tostring())
        length = len(_v55.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v55.accelerations.tostring())
        length = len(_v55.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v55.jerks.tostring())
        buff.write(_get_struct_d().pack(_v55.time))
        _v56 = val1.ms_begin
        length = len(_v56.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v56.positions.tostring())
        length = len(_v56.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v56.velocities.tostring())
        length = len(_v56.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v56.accelerations.tostring())
        length = len(_v56.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v56.jerks.tostring())
        buff.write(_get_struct_d().pack(_v56.time))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
      length = len(self.trajectory.holonomic_path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.holonomic_path.points:
        _v57 = val1.motionState
        length = len(_v57.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v57.positions.tostring())
        length = len(_v57.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v57.velocities.tostring())
        length = len(_v57.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v57.accelerations.tostring())
        length = len(_v57.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v57.jerks.tostring())
        buff.write(_get_struct_d().pack(_v57.time))
        buff.write(_get_struct_I().pack(val1.stopTime))
      _x = self
      buff.write(_get_struct_Bd2ib2i3d().pack(_x.trajectory.feasible, _x.trajectory.fitness, _x.trajectory.t_firstCollision.secs, _x.trajectory.t_firstCollision.nsecs, _x.trajectory.i_subPopulation, _x.trajectory.t_start.secs, _x.trajectory.t_start.nsecs, _x.robot_radius, _x.currentTheta, _x.theta_cc))
      length = len(self.obstacle_trjs)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_trjs:
        _v58 = val1.header
        buff.write(_get_struct_I().pack(_v58.seq))
        _v59 = _v58.stamp
        _x = _v59
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v58.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_H().pack(val1.id))
        _v60 = val1.trajectory
        _v61 = _v60.header
        buff.write(_get_struct_I().pack(_v61.seq))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v60.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v60.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v60.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v60.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v63 = val3.time_from_start
          _x = _v63
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.i_knotPoints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sH'%length
        buff.write(val1.i_knotPoints.tostring())
        length = len(val1.curves)
        buff.write(_struct_I.pack(length))
        for val2 in val1.curves:
          _v64 = val2.header
          buff.write(_get_struct_I().pack(_v64.seq))
          _v65 = _v64.stamp
          _x = _v65
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v64.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.positions.tostring())
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.velocities.tostring())
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.accelerations.tostring())
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.jerks.tostring())
            buff.write(_get_struct_d().pack(val3.time))
          length = len(val2.u_values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.u_values.tostring())
          length = len(val2.segmentPoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.segmentPoints:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.positions.tostring())
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.velocities.tostring())
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.accelerations.tostring())
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.jerks.tostring())
            buff.write(_get_struct_d().pack(val3.time))
          length = len(val2.controlPoints)
          buff.write(_struct_I.pack(length))
          for val3 in val2.controlPoints:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.positions.tostring())
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.velocities.tostring())
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.accelerations.tostring())
            length = len(val3.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.jerks.tostring())
            buff.write(_get_struct_d().pack(val3.time))
          buff.write(_get_struct_d().pack(val2.l))
          _v66 = val2.ms_maxVA
          length = len(_v66.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v66.positions.tostring())
          length = len(_v66.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v66.velocities.tostring())
          length = len(_v66.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v66.accelerations.tostring())
          length = len(_v66.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v66.jerks.tostring())
          buff.write(_get_struct_d().pack(_v66.time))
          _v67 = val2.ms_initialVA
          length = len(_v67.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v67.positions.tostring())
          length = len(_v67.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v67.velocities.tostring())
          length = len(_v67.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v67.accelerations.tostring())
          length = len(_v67.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v67.jerks.tostring())
          buff.write(_get_struct_d().pack(_v67.time))
          _v68 = val2.ms_begin
          length = len(_v68.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v68.positions.tostring())
          length = len(_v68.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v68.velocities.tostring())
          length = len(_v68.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v68.accelerations.tostring())
          length = len(_v68.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v68.jerks.tostring())
          buff.write(_get_struct_d().pack(_v68.time))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
        _v69 = val1.holonomic_path
        length = len(_v69.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v69.points:
          _v70 = val3.motionState
          length = len(_v70.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v70.positions.tostring())
          length = len(_v70.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v70.velocities.tostring())
          length = len(_v70.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v70.accelerations.tostring())
          length = len(_v70.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v70.jerks.tostring())
          buff.write(_get_struct_d().pack(_v70.time))
          buff.write(_get_struct_I().pack(val3.stopTime))
        _x = val1
        buff.write(_get_struct_Bd().pack(_x.feasible, _x.fitness))
        _v71 = val1.t_firstCollision
        _x = _v71
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_b().pack(val1.i_subPopulation))
        _v72 = val1.t_start
        _x = _v72
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.obstacle_cir_groups)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_cir_groups:
        _v73 = val1.fitCir
        _v74 = _v73.center
        _x = _v74
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_d().pack(_v73.radius))
        length = len(val1.packedCirs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.packedCirs:
          _v75 = val2.center
          _x = _v75
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_d().pack(val2.radius))
      _x = self
      buff.write(_get_struct_Bd4B().pack(_x.imminent_collision, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible, _x.hmap_eval))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.trajectory is None:
        self.trajectory = ramp_msgs.msg.RampTrajectory()
      if self.obstacle_trjs is None:
        self.obstacle_trjs = None
      if self.obstacle_cir_groups is None:
        self.obstacle_cir_groups = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trajectory.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.trajectory.id, _x.trajectory.trajectory.header.seq, _x.trajectory.trajectory.header.stamp.secs, _x.trajectory.trajectory.header.stamp.nsecs,) = _get_struct_H3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trajectory.trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trajectory.trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v76 = val1.time_from_start
        _x = _v76
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.trajectory.trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory.i_knotPoints = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.curves = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.BezierCurve()
        _v77 = val1.header
        start = end
        end += 4
        (_v77.seq,) = _get_struct_I().unpack(str[start:end])
        _v78 = _v77.stamp
        _x = _v78
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v77.frame_id = str[start:end].decode('utf-8')
        else:
          _v77.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.u_values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.segmentPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.segmentPoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.controlPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.controlPoints.append(val2)
        start = end
        end += 8
        (val1.l,) = _get_struct_d().unpack(str[start:end])
        _v79 = val1.ms_maxVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v79.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v79.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v79.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v79.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v79.time,) = _get_struct_d().unpack(str[start:end])
        _v80 = val1.ms_initialVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v80.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v80.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v80.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v80.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v80.time,) = _get_struct_d().unpack(str[start:end])
        _v81 = val1.ms_begin
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v81.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v81.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v81.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v81.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v81.time,) = _get_struct_d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
        self.trajectory.curves.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.holonomic_path.points = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.KnotPoint()
        _v82 = val1.motionState
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v82.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v82.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v82.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v82.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v82.time,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (val1.stopTime,) = _get_struct_I().unpack(str[start:end])
        self.trajectory.holonomic_path.points.append(val1)
      _x = self
      start = end
      end += 50
      (_x.trajectory.feasible, _x.trajectory.fitness, _x.trajectory.t_firstCollision.secs, _x.trajectory.t_firstCollision.nsecs, _x.trajectory.i_subPopulation, _x.trajectory.t_start.secs, _x.trajectory.t_start.nsecs, _x.robot_radius, _x.currentTheta, _x.theta_cc,) = _get_struct_Bd2ib2i3d().unpack(str[start:end])
      self.trajectory.feasible = bool(self.trajectory.feasible)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_trjs = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.RampTrajectory()
        _v83 = val1.header
        start = end
        end += 4
        (_v83.seq,) = _get_struct_I().unpack(str[start:end])
        _v84 = _v83.stamp
        _x = _v84
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v83.frame_id = str[start:end].decode('utf-8')
        else:
          _v83.frame_id = str[start:end]
        start = end
        end += 2
        (val1.id,) = _get_struct_H().unpack(str[start:end])
        _v85 = val1.trajectory
        _v86 = _v85.header
        start = end
        end += 4
        (_v86.seq,) = _get_struct_I().unpack(str[start:end])
        _v87 = _v86.stamp
        _x = _v87
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v86.frame_id = str[start:end].decode('utf-8')
        else:
          _v86.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v85.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v85.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v85.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v88 = val3.time_from_start
          _x = _v88
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v85.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sH'%length
        start = end
        end += struct.calcsize(pattern)
        val1.i_knotPoints = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.curves = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.BezierCurve()
          _v89 = val2.header
          start = end
          end += 4
          (_v89.seq,) = _get_struct_I().unpack(str[start:end])
          _v90 = _v89.stamp
          _x = _v90
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v89.frame_id = str[start:end].decode('utf-8')
          else:
            _v89.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.points.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.u_values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.segmentPoints = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.segmentPoints.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.controlPoints = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (val3.time,) = _get_struct_d().unpack(str[start:end])
            val2.controlPoints.append(val3)
          start = end
          end += 8
          (val2.l,) = _get_struct_d().unpack(str[start:end])
          _v91 = val2.ms_maxVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v91.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v91.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v91.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v91.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v91.time,) = _get_struct_d().unpack(str[start:end])
          _v92 = val2.ms_initialVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v92.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v92.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v92.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v92.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v92.time,) = _get_struct_d().unpack(str[start:end])
          _v93 = val2.ms_begin
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v93.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v93.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v93.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v93.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v93.time,) = _get_struct_d().unpack(str[start:end])
          _x = val2
          start = end
          end += 32
          (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
          val1.curves.append(val2)
        _v94 = val1.holonomic_path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.points = []
        for i in range(0, length):
          val3 = ramp_msgs.msg.KnotPoint()
          _v95 = val3.motionState
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v95.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v95.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v95.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v95.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v95.time,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (val3.stopTime,) = _get_struct_I().unpack(str[start:end])
          _v94.points.append(val3)
        _x = val1
        start = end
        end += 9
        (_x.feasible, _x.fitness,) = _get_struct_Bd().unpack(str[start:end])
        val1.feasible = bool(val1.feasible)
        _v96 = val1.t_firstCollision
        _x = _v96
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (val1.i_subPopulation,) = _get_struct_b().unpack(str[start:end])
        _v97 = val1.t_start
        _x = _v97
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.obstacle_trjs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_cir_groups = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.CircleGroup()
        _v98 = val1.fitCir
        _v99 = _v98.center
        _x = _v99
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (_v98.radius,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.packedCirs = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.Circle()
          _v100 = val2.center
          _x = _v100
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (val2.radius,) = _get_struct_d().unpack(str[start:end])
          val1.packedCirs.append(val2)
        self.obstacle_cir_groups.append(val1)
      _x = self
      start = end
      end += 13
      (_x.imminent_collision, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible, _x.hmap_eval,) = _get_struct_Bd4B().unpack(str[start:end])
      self.imminent_collision = bool(self.imminent_collision)
      self.full_eval = bool(self.full_eval)
      self.consider_trans = bool(self.consider_trans)
      self.trans_possible = bool(self.trans_possible)
      self.hmap_eval = bool(self.hmap_eval)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bd = None
def _get_struct_Bd():
    global _struct_Bd
    if _struct_Bd is None:
        _struct_Bd = struct.Struct("<Bd")
    return _struct_Bd
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_H3I = None
def _get_struct_H3I():
    global _struct_H3I
    if _struct_H3I is None:
        _struct_H3I = struct.Struct("<H3I")
    return _struct_H3I
_struct_Bd2ib2i3d = None
def _get_struct_Bd2ib2i3d():
    global _struct_Bd2ib2i3d
    if _struct_Bd2ib2i3d is None:
        _struct_Bd2ib2i3d = struct.Struct("<Bd2ib2i3d")
    return _struct_Bd2ib2i3d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_Bd4B = None
def _get_struct_Bd4B():
    global _struct_Bd4B
    if _struct_Bd4B is None:
        _struct_Bd4B = struct.Struct("<Bd4B")
    return _struct_Bd4B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
