# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ramp_msgs/Obstacle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import geometry_msgs.msg
import nav_msgs.msg
import ramp_msgs.msg

class Obstacle(genpy.Message):
  _md5sum = "4161a43c4114be728fdd1d8e33f7e027"
  _type = "ramp_msgs/Obstacle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ramp_msgs/MotionState ob_ms
ramp_msgs/CircleGroup cirGroup
nav_msgs/Odometry odom
geometry_msgs/Transform T_w_odom

================================================================================
MSG: ramp_msgs/MotionState
float64[] positions
float64[] velocities
float64[] accelerations
float64[] jerks

# change to duration
float64 time

================================================================================
MSG: ramp_msgs/CircleGroup
ramp_msgs/Circle fitCir
ramp_msgs/Circle[] packedCirs

================================================================================
MSG: ramp_msgs/Circle
geometry_msgs/Vector3 center
float64 radius

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: nav_msgs/Odometry
# This represents an estimate of a position and velocity in free space.  
# The pose in this message should be specified in the coordinate frame given by header.frame_id.
# The twist in this message should be specified in the coordinate frame given by the child_frame_id
Header header
string child_frame_id
geometry_msgs/PoseWithCovariance pose
geometry_msgs/TwistWithCovariance twist

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation
"""
  __slots__ = ['ob_ms','cirGroup','odom','T_w_odom']
  _slot_types = ['ramp_msgs/MotionState','ramp_msgs/CircleGroup','nav_msgs/Odometry','geometry_msgs/Transform']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ob_ms,cirGroup,odom,T_w_odom

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ob_ms is None:
        self.ob_ms = ramp_msgs.msg.MotionState()
      if self.cirGroup is None:
        self.cirGroup = ramp_msgs.msg.CircleGroup()
      if self.odom is None:
        self.odom = nav_msgs.msg.Odometry()
      if self.T_w_odom is None:
        self.T_w_odom = geometry_msgs.msg.Transform()
    else:
      self.ob_ms = ramp_msgs.msg.MotionState()
      self.cirGroup = ramp_msgs.msg.CircleGroup()
      self.odom = nav_msgs.msg.Odometry()
      self.T_w_odom = geometry_msgs.msg.Transform()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.ob_ms.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.ob_ms.positions))
      length = len(self.ob_ms.velocities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.ob_ms.velocities))
      length = len(self.ob_ms.accelerations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.ob_ms.accelerations))
      length = len(self.ob_ms.jerks)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.ob_ms.jerks))
      _x = self
      buff.write(_get_struct_5d().pack(_x.ob_ms.time, _x.cirGroup.fitCir.center.x, _x.cirGroup.fitCir.center.y, _x.cirGroup.fitCir.center.z, _x.cirGroup.fitCir.radius))
      length = len(self.cirGroup.packedCirs)
      buff.write(_struct_I.pack(length))
      for val1 in self.cirGroup.packedCirs:
        _v1 = val1.center
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_d().pack(val1.radius))
      _x = self
      buff.write(_get_struct_3I().pack(_x.odom.header.seq, _x.odom.header.stamp.secs, _x.odom.header.stamp.nsecs))
      _x = self.odom.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.odom.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.odom.pose.pose.position.x, _x.odom.pose.pose.position.y, _x.odom.pose.pose.position.z, _x.odom.pose.pose.orientation.x, _x.odom.pose.pose.orientation.y, _x.odom.pose.pose.orientation.z, _x.odom.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.odom.pose.covariance))
      _x = self
      buff.write(_get_struct_6d().pack(_x.odom.twist.twist.linear.x, _x.odom.twist.twist.linear.y, _x.odom.twist.twist.linear.z, _x.odom.twist.twist.angular.x, _x.odom.twist.twist.angular.y, _x.odom.twist.twist.angular.z))
      buff.write(_get_struct_36d().pack(*self.odom.twist.covariance))
      _x = self
      buff.write(_get_struct_7d().pack(_x.T_w_odom.translation.x, _x.T_w_odom.translation.y, _x.T_w_odom.translation.z, _x.T_w_odom.rotation.x, _x.T_w_odom.rotation.y, _x.T_w_odom.rotation.z, _x.T_w_odom.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ob_ms is None:
        self.ob_ms = ramp_msgs.msg.MotionState()
      if self.cirGroup is None:
        self.cirGroup = ramp_msgs.msg.CircleGroup()
      if self.odom is None:
        self.odom = nav_msgs.msg.Odometry()
      if self.T_w_odom is None:
        self.T_w_odom = geometry_msgs.msg.Transform()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ob_ms.positions = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ob_ms.velocities = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ob_ms.accelerations = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ob_ms.jerks = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 40
      (_x.ob_ms.time, _x.cirGroup.fitCir.center.x, _x.cirGroup.fitCir.center.y, _x.cirGroup.fitCir.center.z, _x.cirGroup.fitCir.radius,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cirGroup.packedCirs = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.Circle()
        _v2 = val1.center
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.radius,) = _get_struct_d().unpack(str[start:end])
        self.cirGroup.packedCirs.append(val1)
      _x = self
      start = end
      end += 12
      (_x.odom.header.seq, _x.odom.header.stamp.secs, _x.odom.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odom.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.odom.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odom.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.odom.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odom.pose.pose.position.x, _x.odom.pose.pose.position.y, _x.odom.pose.pose.position.z, _x.odom.pose.pose.orientation.x, _x.odom.pose.pose.orientation.y, _x.odom.pose.pose.orientation.z, _x.odom.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.odom.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.odom.twist.twist.linear.x, _x.odom.twist.twist.linear.y, _x.odom.twist.twist.linear.z, _x.odom.twist.twist.angular.x, _x.odom.twist.twist.angular.y, _x.odom.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.odom.twist.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 56
      (_x.T_w_odom.translation.x, _x.T_w_odom.translation.y, _x.T_w_odom.translation.z, _x.T_w_odom.rotation.x, _x.T_w_odom.rotation.y, _x.T_w_odom.rotation.z, _x.T_w_odom.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.ob_ms.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ob_ms.positions.tostring())
      length = len(self.ob_ms.velocities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ob_ms.velocities.tostring())
      length = len(self.ob_ms.accelerations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ob_ms.accelerations.tostring())
      length = len(self.ob_ms.jerks)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ob_ms.jerks.tostring())
      _x = self
      buff.write(_get_struct_5d().pack(_x.ob_ms.time, _x.cirGroup.fitCir.center.x, _x.cirGroup.fitCir.center.y, _x.cirGroup.fitCir.center.z, _x.cirGroup.fitCir.radius))
      length = len(self.cirGroup.packedCirs)
      buff.write(_struct_I.pack(length))
      for val1 in self.cirGroup.packedCirs:
        _v3 = val1.center
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_d().pack(val1.radius))
      _x = self
      buff.write(_get_struct_3I().pack(_x.odom.header.seq, _x.odom.header.stamp.secs, _x.odom.header.stamp.nsecs))
      _x = self.odom.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.odom.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.odom.pose.pose.position.x, _x.odom.pose.pose.position.y, _x.odom.pose.pose.position.z, _x.odom.pose.pose.orientation.x, _x.odom.pose.pose.orientation.y, _x.odom.pose.pose.orientation.z, _x.odom.pose.pose.orientation.w))
      buff.write(self.odom.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.odom.twist.twist.linear.x, _x.odom.twist.twist.linear.y, _x.odom.twist.twist.linear.z, _x.odom.twist.twist.angular.x, _x.odom.twist.twist.angular.y, _x.odom.twist.twist.angular.z))
      buff.write(self.odom.twist.covariance.tostring())
      _x = self
      buff.write(_get_struct_7d().pack(_x.T_w_odom.translation.x, _x.T_w_odom.translation.y, _x.T_w_odom.translation.z, _x.T_w_odom.rotation.x, _x.T_w_odom.rotation.y, _x.T_w_odom.rotation.z, _x.T_w_odom.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ob_ms is None:
        self.ob_ms = ramp_msgs.msg.MotionState()
      if self.cirGroup is None:
        self.cirGroup = ramp_msgs.msg.CircleGroup()
      if self.odom is None:
        self.odom = nav_msgs.msg.Odometry()
      if self.T_w_odom is None:
        self.T_w_odom = geometry_msgs.msg.Transform()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ob_ms.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ob_ms.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ob_ms.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ob_ms.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 40
      (_x.ob_ms.time, _x.cirGroup.fitCir.center.x, _x.cirGroup.fitCir.center.y, _x.cirGroup.fitCir.center.z, _x.cirGroup.fitCir.radius,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cirGroup.packedCirs = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.Circle()
        _v4 = val1.center
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.radius,) = _get_struct_d().unpack(str[start:end])
        self.cirGroup.packedCirs.append(val1)
      _x = self
      start = end
      end += 12
      (_x.odom.header.seq, _x.odom.header.stamp.secs, _x.odom.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odom.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.odom.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odom.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.odom.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odom.pose.pose.position.x, _x.odom.pose.pose.position.y, _x.odom.pose.pose.position.z, _x.odom.pose.pose.orientation.x, _x.odom.pose.pose.orientation.y, _x.odom.pose.pose.orientation.z, _x.odom.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.odom.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.odom.twist.twist.linear.x, _x.odom.twist.twist.linear.y, _x.odom.twist.twist.linear.z, _x.odom.twist.twist.angular.x, _x.odom.twist.twist.angular.y, _x.odom.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.odom.twist.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 56
      (_x.T_w_odom.translation.x, _x.T_w_odom.translation.y, _x.T_w_odom.translation.z, _x.T_w_odom.rotation.x, _x.T_w_odom.rotation.y, _x.T_w_odom.rotation.z, _x.T_w_odom.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
