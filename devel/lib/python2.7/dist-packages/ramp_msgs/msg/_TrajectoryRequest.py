# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ramp_msgs/TrajectoryRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import genpy
import ramp_msgs.msg

class TrajectoryRequest(genpy.Message):
  _md5sum = "ad9619205ac6cad901fa5450a41bd191"
  _type = "ramp_msgs/TrajectoryRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ramp_msgs/Path path
uint8 type 
bool print
ramp_msgs/BezierCurve[] bezierCurves
int8 segments
float64 max_speed_linear
float64 max_speed_angular

# For system-level test generation...
bool sl_traj
float64 sl_final_speed
duration sl_init_dur
duration sl_final_dur

================================================================================
MSG: ramp_msgs/Path
ramp_msgs/KnotPoint[] points

================================================================================
MSG: ramp_msgs/KnotPoint
ramp_msgs/MotionState motionState
uint32 stopTime

================================================================================
MSG: ramp_msgs/MotionState
float64[] positions
float64[] velocities
float64[] accelerations
float64[] jerks

# change to duration
float64 time

================================================================================
MSG: ramp_msgs/BezierCurve
Header header

ramp_msgs/MotionState[] points
float64[] u_values

ramp_msgs/MotionState[] segmentPoints
ramp_msgs/MotionState[] controlPoints

float64 l
ramp_msgs/MotionState ms_maxVA
ramp_msgs/MotionState ms_initialVA
ramp_msgs/MotionState ms_begin
float64 u_0
float64 u_dot_0
float64 u_dot_max
float64 u_target

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['path','type','print_','bezierCurves','segments','max_speed_linear','max_speed_angular','sl_traj','sl_final_speed','sl_init_dur','sl_final_dur']
  _slot_types = ['ramp_msgs/Path','uint8','bool','ramp_msgs/BezierCurve[]','int8','float64','float64','bool','float64','duration','duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path,type,print_,bezierCurves,segments,max_speed_linear,max_speed_angular,sl_traj,sl_final_speed,sl_init_dur,sl_final_dur

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.path is None:
        self.path = ramp_msgs.msg.Path()
      if self.type is None:
        self.type = 0
      if self.print_ is None:
        self.print_ = False
      if self.bezierCurves is None:
        self.bezierCurves = []
      if self.segments is None:
        self.segments = 0
      if self.max_speed_linear is None:
        self.max_speed_linear = 0.
      if self.max_speed_angular is None:
        self.max_speed_angular = 0.
      if self.sl_traj is None:
        self.sl_traj = False
      if self.sl_final_speed is None:
        self.sl_final_speed = 0.
      if self.sl_init_dur is None:
        self.sl_init_dur = genpy.Duration()
      if self.sl_final_dur is None:
        self.sl_final_dur = genpy.Duration()
    else:
      self.path = ramp_msgs.msg.Path()
      self.type = 0
      self.print_ = False
      self.bezierCurves = []
      self.segments = 0
      self.max_speed_linear = 0.
      self.max_speed_angular = 0.
      self.sl_traj = False
      self.sl_final_speed = 0.
      self.sl_init_dur = genpy.Duration()
      self.sl_final_dur = genpy.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.points:
        _v1 = val1.motionState
        length = len(_v1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v1.positions))
        length = len(_v1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v1.velocities))
        length = len(_v1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v1.accelerations))
        length = len(_v1.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v1.jerks))
        buff.write(_get_struct_d().pack(_v1.time))
        buff.write(_get_struct_I().pack(val1.stopTime))
      _x = self
      buff.write(_get_struct_2B().pack(_x.type, _x.print_))
      length = len(self.bezierCurves)
      buff.write(_struct_I.pack(length))
      for val1 in self.bezierCurves:
        _v2 = val1.header
        buff.write(_get_struct_I().pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.positions))
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.velocities))
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.accelerations))
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.jerks))
          buff.write(_get_struct_d().pack(val2.time))
        length = len(val1.u_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.u_values))
        length = len(val1.segmentPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.segmentPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.positions))
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.velocities))
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.accelerations))
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.jerks))
          buff.write(_get_struct_d().pack(val2.time))
        length = len(val1.controlPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.controlPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.positions))
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.velocities))
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.accelerations))
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.jerks))
          buff.write(_get_struct_d().pack(val2.time))
        buff.write(_get_struct_d().pack(val1.l))
        _v4 = val1.ms_maxVA
        length = len(_v4.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v4.positions))
        length = len(_v4.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v4.velocities))
        length = len(_v4.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v4.accelerations))
        length = len(_v4.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v4.jerks))
        buff.write(_get_struct_d().pack(_v4.time))
        _v5 = val1.ms_initialVA
        length = len(_v5.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v5.positions))
        length = len(_v5.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v5.velocities))
        length = len(_v5.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v5.accelerations))
        length = len(_v5.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v5.jerks))
        buff.write(_get_struct_d().pack(_v5.time))
        _v6 = val1.ms_begin
        length = len(_v6.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v6.positions))
        length = len(_v6.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v6.velocities))
        length = len(_v6.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v6.accelerations))
        length = len(_v6.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v6.jerks))
        buff.write(_get_struct_d().pack(_v6.time))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
      _x = self
      buff.write(_get_struct_b2dBd4i().pack(_x.segments, _x.max_speed_linear, _x.max_speed_angular, _x.sl_traj, _x.sl_final_speed, _x.sl_init_dur.secs, _x.sl_init_dur.nsecs, _x.sl_final_dur.secs, _x.sl_final_dur.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.path is None:
        self.path = ramp_msgs.msg.Path()
      if self.bezierCurves is None:
        self.bezierCurves = None
      if self.sl_init_dur is None:
        self.sl_init_dur = genpy.Duration()
      if self.sl_final_dur is None:
        self.sl_final_dur = genpy.Duration()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.points = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.KnotPoint()
        _v7 = val1.motionState
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v7.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v7.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v7.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v7.jerks = struct.unpack(pattern, str[start:end])
        start = end
        end += 8
        (_v7.time,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (val1.stopTime,) = _get_struct_I().unpack(str[start:end])
        self.path.points.append(val1)
      _x = self
      start = end
      end += 2
      (_x.type, _x.print_,) = _get_struct_2B().unpack(str[start:end])
      self.print_ = bool(self.print_)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bezierCurves = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.BezierCurve()
        _v8 = val1.header
        start = end
        end += 4
        (_v8.seq,) = _get_struct_I().unpack(str[start:end])
        _v9 = _v8.stamp
        _x = _v9
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.frame_id = str[start:end].decode('utf-8')
        else:
          _v8.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.u_values = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.segmentPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.segmentPoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.controlPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.controlPoints.append(val2)
        start = end
        end += 8
        (val1.l,) = _get_struct_d().unpack(str[start:end])
        _v10 = val1.ms_maxVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v10.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v10.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v10.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v10.jerks = struct.unpack(pattern, str[start:end])
        start = end
        end += 8
        (_v10.time,) = _get_struct_d().unpack(str[start:end])
        _v11 = val1.ms_initialVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v11.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v11.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v11.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v11.jerks = struct.unpack(pattern, str[start:end])
        start = end
        end += 8
        (_v11.time,) = _get_struct_d().unpack(str[start:end])
        _v12 = val1.ms_begin
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v12.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v12.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v12.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v12.jerks = struct.unpack(pattern, str[start:end])
        start = end
        end += 8
        (_v12.time,) = _get_struct_d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
        self.bezierCurves.append(val1)
      _x = self
      start = end
      end += 42
      (_x.segments, _x.max_speed_linear, _x.max_speed_angular, _x.sl_traj, _x.sl_final_speed, _x.sl_init_dur.secs, _x.sl_init_dur.nsecs, _x.sl_final_dur.secs, _x.sl_final_dur.nsecs,) = _get_struct_b2dBd4i().unpack(str[start:end])
      self.sl_traj = bool(self.sl_traj)
      self.sl_init_dur.canon()
      self.sl_final_dur.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.points:
        _v13 = val1.motionState
        length = len(_v13.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v13.positions.tostring())
        length = len(_v13.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v13.velocities.tostring())
        length = len(_v13.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v13.accelerations.tostring())
        length = len(_v13.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v13.jerks.tostring())
        buff.write(_get_struct_d().pack(_v13.time))
        buff.write(_get_struct_I().pack(val1.stopTime))
      _x = self
      buff.write(_get_struct_2B().pack(_x.type, _x.print_))
      length = len(self.bezierCurves)
      buff.write(_struct_I.pack(length))
      for val1 in self.bezierCurves:
        _v14 = val1.header
        buff.write(_get_struct_I().pack(_v14.seq))
        _v15 = _v14.stamp
        _x = _v15
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v14.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.positions.tostring())
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.velocities.tostring())
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.accelerations.tostring())
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.jerks.tostring())
          buff.write(_get_struct_d().pack(val2.time))
        length = len(val1.u_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.u_values.tostring())
        length = len(val1.segmentPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.segmentPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.positions.tostring())
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.velocities.tostring())
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.accelerations.tostring())
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.jerks.tostring())
          buff.write(_get_struct_d().pack(val2.time))
        length = len(val1.controlPoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.controlPoints:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.positions.tostring())
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.velocities.tostring())
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.accelerations.tostring())
          length = len(val2.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.jerks.tostring())
          buff.write(_get_struct_d().pack(val2.time))
        buff.write(_get_struct_d().pack(val1.l))
        _v16 = val1.ms_maxVA
        length = len(_v16.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v16.positions.tostring())
        length = len(_v16.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v16.velocities.tostring())
        length = len(_v16.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v16.accelerations.tostring())
        length = len(_v16.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v16.jerks.tostring())
        buff.write(_get_struct_d().pack(_v16.time))
        _v17 = val1.ms_initialVA
        length = len(_v17.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v17.positions.tostring())
        length = len(_v17.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v17.velocities.tostring())
        length = len(_v17.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v17.accelerations.tostring())
        length = len(_v17.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v17.jerks.tostring())
        buff.write(_get_struct_d().pack(_v17.time))
        _v18 = val1.ms_begin
        length = len(_v18.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v18.positions.tostring())
        length = len(_v18.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v18.velocities.tostring())
        length = len(_v18.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v18.accelerations.tostring())
        length = len(_v18.jerks)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v18.jerks.tostring())
        buff.write(_get_struct_d().pack(_v18.time))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
      _x = self
      buff.write(_get_struct_b2dBd4i().pack(_x.segments, _x.max_speed_linear, _x.max_speed_angular, _x.sl_traj, _x.sl_final_speed, _x.sl_init_dur.secs, _x.sl_init_dur.nsecs, _x.sl_final_dur.secs, _x.sl_final_dur.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.path is None:
        self.path = ramp_msgs.msg.Path()
      if self.bezierCurves is None:
        self.bezierCurves = None
      if self.sl_init_dur is None:
        self.sl_init_dur = genpy.Duration()
      if self.sl_final_dur is None:
        self.sl_final_dur = genpy.Duration()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.points = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.KnotPoint()
        _v19 = val1.motionState
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v19.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v19.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v19.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v19.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v19.time,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (val1.stopTime,) = _get_struct_I().unpack(str[start:end])
        self.path.points.append(val1)
      _x = self
      start = end
      end += 2
      (_x.type, _x.print_,) = _get_struct_2B().unpack(str[start:end])
      self.print_ = bool(self.print_)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bezierCurves = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.BezierCurve()
        _v20 = val1.header
        start = end
        end += 4
        (_v20.seq,) = _get_struct_I().unpack(str[start:end])
        _v21 = _v20.stamp
        _x = _v21
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v20.frame_id = str[start:end].decode('utf-8')
        else:
          _v20.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.u_values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.segmentPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.segmentPoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.controlPoints = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.MotionState()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (val2.time,) = _get_struct_d().unpack(str[start:end])
          val1.controlPoints.append(val2)
        start = end
        end += 8
        (val1.l,) = _get_struct_d().unpack(str[start:end])
        _v22 = val1.ms_maxVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v22.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v22.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v22.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v22.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v22.time,) = _get_struct_d().unpack(str[start:end])
        _v23 = val1.ms_initialVA
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v23.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v23.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v23.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v23.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v23.time,) = _get_struct_d().unpack(str[start:end])
        _v24 = val1.ms_begin
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v24.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v24.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v24.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v24.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 8
        (_v24.time,) = _get_struct_d().unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
        self.bezierCurves.append(val1)
      _x = self
      start = end
      end += 42
      (_x.segments, _x.max_speed_linear, _x.max_speed_angular, _x.sl_traj, _x.sl_final_speed, _x.sl_init_dur.secs, _x.sl_init_dur.nsecs, _x.sl_final_dur.secs, _x.sl_final_dur.nsecs,) = _get_struct_b2dBd4i().unpack(str[start:end])
      self.sl_traj = bool(self.sl_traj)
      self.sl_init_dur.canon()
      self.sl_final_dur.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b2dBd4i = None
def _get_struct_b2dBd4i():
    global _struct_b2dBd4i
    if _struct_b2dBd4i is None:
        _struct_b2dBd4i = struct.Struct("<b2dBd4i")
    return _struct_b2dBd4i
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
