# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ramp_msgs/EvaluationSrvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import geometry_msgs.msg
import std_msgs.msg
import genpy
import ramp_msgs.msg

class EvaluationSrvRequest(genpy.Message):
  _md5sum = "c5f4358a97c363f83106d9ab74137f28"
  _type = "ramp_msgs/EvaluationSrvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """EvaluationRequest[] reqs


================================================================================
MSG: ramp_msgs/EvaluationRequest
RampTrajectory trajectory
float64 robot_radius
float64 currentTheta
float64 theta_cc
RampTrajectory[] obstacle_trjs
CircleGroup[] obstacle_cir_groups
bool imminent_collision
float64 offset
bool full_eval

bool consider_trans
bool trans_possible
bool hmap_eval

================================================================================
MSG: ramp_msgs/RampTrajectory
Header header
uint16 id
trajectory_msgs/JointTrajectory trajectory
uint16[] i_knotPoints
ramp_msgs/BezierCurve[] curves
ramp_msgs/Path holonomic_path

bool feasible
float64 fitness

duration t_firstCollision
int8 i_subPopulation

duration t_start

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: ramp_msgs/BezierCurve
Header header

ramp_msgs/MotionState[] points
float64[] u_values

ramp_msgs/MotionState[] segmentPoints
ramp_msgs/MotionState[] controlPoints

float64 l
ramp_msgs/MotionState ms_maxVA
ramp_msgs/MotionState ms_initialVA
ramp_msgs/MotionState ms_begin
float64 u_0
float64 u_dot_0
float64 u_dot_max
float64 u_target

================================================================================
MSG: ramp_msgs/MotionState
float64[] positions
float64[] velocities
float64[] accelerations
float64[] jerks

# change to duration
float64 time

================================================================================
MSG: ramp_msgs/Path
ramp_msgs/KnotPoint[] points

================================================================================
MSG: ramp_msgs/KnotPoint
ramp_msgs/MotionState motionState
uint32 stopTime

================================================================================
MSG: ramp_msgs/CircleGroup
ramp_msgs/Circle fitCir
ramp_msgs/Circle[] packedCirs

================================================================================
MSG: ramp_msgs/Circle
geometry_msgs/Vector3 center
float64 radius

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['reqs']
  _slot_types = ['ramp_msgs/EvaluationRequest[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reqs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvaluationSrvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.reqs is None:
        self.reqs = []
    else:
      self.reqs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.reqs)
      buff.write(_struct_I.pack(length))
      for val1 in self.reqs:
        _v1 = val1.trajectory
        _v2 = _v1.header
        buff.write(_get_struct_I().pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_H().pack(_v1.id))
        _v4 = _v1.trajectory
        _v5 = _v4.header
        buff.write(_get_struct_I().pack(_v5.seq))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v4.joint_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v4.joint_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.pack('<I%ss'%length, length, val4))
        length = len(_v4.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v4.points:
          length = len(val4.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val4.positions))
          length = len(val4.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val4.velocities))
          length = len(val4.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val4.accelerations))
          length = len(val4.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val4.effort))
          _v7 = val4.time_from_start
          _x = _v7
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(_v1.i_knotPoints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sH'%length
        buff.write(struct.pack(pattern, *_v1.i_knotPoints))
        length = len(_v1.curves)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.curves:
          _v8 = val3.header
          buff.write(_get_struct_I().pack(_v8.seq))
          _v9 = _v8.stamp
          _x = _v9
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v8.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.positions))
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.velocities))
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.accelerations))
            length = len(val4.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.jerks))
            buff.write(_get_struct_d().pack(val4.time))
          length = len(val3.u_values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.u_values))
          length = len(val3.segmentPoints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.segmentPoints:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.positions))
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.velocities))
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.accelerations))
            length = len(val4.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.jerks))
            buff.write(_get_struct_d().pack(val4.time))
          length = len(val3.controlPoints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.controlPoints:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.positions))
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.velocities))
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.accelerations))
            length = len(val4.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.jerks))
            buff.write(_get_struct_d().pack(val4.time))
          buff.write(_get_struct_d().pack(val3.l))
          _v10 = val3.ms_maxVA
          length = len(_v10.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v10.positions))
          length = len(_v10.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v10.velocities))
          length = len(_v10.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v10.accelerations))
          length = len(_v10.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v10.jerks))
          buff.write(_get_struct_d().pack(_v10.time))
          _v11 = val3.ms_initialVA
          length = len(_v11.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v11.positions))
          length = len(_v11.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v11.velocities))
          length = len(_v11.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v11.accelerations))
          length = len(_v11.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v11.jerks))
          buff.write(_get_struct_d().pack(_v11.time))
          _v12 = val3.ms_begin
          length = len(_v12.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v12.positions))
          length = len(_v12.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v12.velocities))
          length = len(_v12.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v12.accelerations))
          length = len(_v12.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v12.jerks))
          buff.write(_get_struct_d().pack(_v12.time))
          _x = val3
          buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
        _v13 = _v1.holonomic_path
        length = len(_v13.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v13.points:
          _v14 = val4.motionState
          length = len(_v14.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v14.positions))
          length = len(_v14.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v14.velocities))
          length = len(_v14.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v14.accelerations))
          length = len(_v14.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v14.jerks))
          buff.write(_get_struct_d().pack(_v14.time))
          buff.write(_get_struct_I().pack(val4.stopTime))
        _x = _v1
        buff.write(_get_struct_Bd().pack(_x.feasible, _x.fitness))
        _v15 = _v1.t_firstCollision
        _x = _v15
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_b().pack(_v1.i_subPopulation))
        _v16 = _v1.t_start
        _x = _v16
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.robot_radius, _x.currentTheta, _x.theta_cc))
        length = len(val1.obstacle_trjs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.obstacle_trjs:
          _v17 = val2.header
          buff.write(_get_struct_I().pack(_v17.seq))
          _v18 = _v17.stamp
          _x = _v18
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v17.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_H().pack(val2.id))
          _v19 = val2.trajectory
          _v20 = _v19.header
          buff.write(_get_struct_I().pack(_v20.seq))
          _v21 = _v20.stamp
          _x = _v21
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v20.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v19.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v19.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.pack('<I%ss'%length, length, val4))
          length = len(_v19.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v19.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.positions))
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.velocities))
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.accelerations))
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.effort))
            _v22 = val4.time_from_start
            _x = _v22
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          length = len(val2.i_knotPoints)
          buff.write(_struct_I.pack(length))
          pattern = '<%sH'%length
          buff.write(struct.pack(pattern, *val2.i_knotPoints))
          length = len(val2.curves)
          buff.write(_struct_I.pack(length))
          for val3 in val2.curves:
            _v23 = val3.header
            buff.write(_get_struct_I().pack(_v23.seq))
            _v24 = _v23.stamp
            _x = _v24
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v23.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            length = len(val3.points)
            buff.write(_struct_I.pack(length))
            for val4 in val3.points:
              length = len(val4.positions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.positions))
              length = len(val4.velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.velocities))
              length = len(val4.accelerations)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.accelerations))
              length = len(val4.jerks)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.jerks))
              buff.write(_get_struct_d().pack(val4.time))
            length = len(val3.u_values)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.u_values))
            length = len(val3.segmentPoints)
            buff.write(_struct_I.pack(length))
            for val4 in val3.segmentPoints:
              length = len(val4.positions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.positions))
              length = len(val4.velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.velocities))
              length = len(val4.accelerations)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.accelerations))
              length = len(val4.jerks)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.jerks))
              buff.write(_get_struct_d().pack(val4.time))
            length = len(val3.controlPoints)
            buff.write(_struct_I.pack(length))
            for val4 in val3.controlPoints:
              length = len(val4.positions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.positions))
              length = len(val4.velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.velocities))
              length = len(val4.accelerations)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.accelerations))
              length = len(val4.jerks)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.pack(pattern, *val4.jerks))
              buff.write(_get_struct_d().pack(val4.time))
            buff.write(_get_struct_d().pack(val3.l))
            _v25 = val3.ms_maxVA
            length = len(_v25.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v25.positions))
            length = len(_v25.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v25.velocities))
            length = len(_v25.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v25.accelerations))
            length = len(_v25.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v25.jerks))
            buff.write(_get_struct_d().pack(_v25.time))
            _v26 = val3.ms_initialVA
            length = len(_v26.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v26.positions))
            length = len(_v26.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v26.velocities))
            length = len(_v26.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v26.accelerations))
            length = len(_v26.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v26.jerks))
            buff.write(_get_struct_d().pack(_v26.time))
            _v27 = val3.ms_begin
            length = len(_v27.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v27.positions))
            length = len(_v27.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v27.velocities))
            length = len(_v27.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v27.accelerations))
            length = len(_v27.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v27.jerks))
            buff.write(_get_struct_d().pack(_v27.time))
            _x = val3
            buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
          _v28 = val2.holonomic_path
          length = len(_v28.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v28.points:
            _v29 = val4.motionState
            length = len(_v29.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v29.positions))
            length = len(_v29.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v29.velocities))
            length = len(_v29.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v29.accelerations))
            length = len(_v29.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *_v29.jerks))
            buff.write(_get_struct_d().pack(_v29.time))
            buff.write(_get_struct_I().pack(val4.stopTime))
          _x = val2
          buff.write(_get_struct_Bd().pack(_x.feasible, _x.fitness))
          _v30 = val2.t_firstCollision
          _x = _v30
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          buff.write(_get_struct_b().pack(val2.i_subPopulation))
          _v31 = val2.t_start
          _x = _v31
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.obstacle_cir_groups)
        buff.write(_struct_I.pack(length))
        for val2 in val1.obstacle_cir_groups:
          _v32 = val2.fitCir
          _v33 = _v32.center
          _x = _v33
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_d().pack(_v32.radius))
          length = len(val2.packedCirs)
          buff.write(_struct_I.pack(length))
          for val3 in val2.packedCirs:
            _v34 = val3.center
            _x = _v34
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            buff.write(_get_struct_d().pack(val3.radius))
        _x = val1
        buff.write(_get_struct_Bd4B().pack(_x.imminent_collision, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible, _x.hmap_eval))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.reqs is None:
        self.reqs = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reqs = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.EvaluationRequest()
        _v35 = val1.trajectory
        _v36 = _v35.header
        start = end
        end += 4
        (_v36.seq,) = _get_struct_I().unpack(str[start:end])
        _v37 = _v36.stamp
        _x = _v37
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v36.frame_id = str[start:end].decode('utf-8')
        else:
          _v36.frame_id = str[start:end]
        start = end
        end += 2
        (_v35.id,) = _get_struct_H().unpack(str[start:end])
        _v38 = _v35.trajectory
        _v39 = _v38.header
        start = end
        end += 4
        (_v39.seq,) = _get_struct_I().unpack(str[start:end])
        _v40 = _v39.stamp
        _x = _v40
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v39.frame_id = str[start:end].decode('utf-8')
        else:
          _v39.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v38.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8')
          else:
            val4 = str[start:end]
          _v38.joint_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v38.points = []
        for i in range(0, length):
          val4 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.effort = struct.unpack(pattern, str[start:end])
          _v41 = val4.time_from_start
          _x = _v41
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v38.points.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sH'%length
        start = end
        end += struct.calcsize(pattern)
        _v35.i_knotPoints = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v35.curves = []
        for i in range(0, length):
          val3 = ramp_msgs.msg.BezierCurve()
          _v42 = val3.header
          start = end
          end += 4
          (_v42.seq,) = _get_struct_I().unpack(str[start:end])
          _v43 = _v42.stamp
          _x = _v43
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v42.frame_id = str[start:end].decode('utf-8')
          else:
            _v42.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.jerks = struct.unpack(pattern, str[start:end])
            start = end
            end += 8
            (val4.time,) = _get_struct_d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.u_values = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.segmentPoints = []
          for i in range(0, length):
            val4 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.jerks = struct.unpack(pattern, str[start:end])
            start = end
            end += 8
            (val4.time,) = _get_struct_d().unpack(str[start:end])
            val3.segmentPoints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.controlPoints = []
          for i in range(0, length):
            val4 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.jerks = struct.unpack(pattern, str[start:end])
            start = end
            end += 8
            (val4.time,) = _get_struct_d().unpack(str[start:end])
            val3.controlPoints.append(val4)
          start = end
          end += 8
          (val3.l,) = _get_struct_d().unpack(str[start:end])
          _v44 = val3.ms_maxVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v44.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v44.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v44.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v44.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (_v44.time,) = _get_struct_d().unpack(str[start:end])
          _v45 = val3.ms_initialVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v45.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v45.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v45.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v45.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (_v45.time,) = _get_struct_d().unpack(str[start:end])
          _v46 = val3.ms_begin
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v46.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v46.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v46.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v46.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (_v46.time,) = _get_struct_d().unpack(str[start:end])
          _x = val3
          start = end
          end += 32
          (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
          _v35.curves.append(val3)
        _v47 = _v35.holonomic_path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.points = []
        for i in range(0, length):
          val4 = ramp_msgs.msg.KnotPoint()
          _v48 = val4.motionState
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v48.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v48.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v48.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v48.jerks = struct.unpack(pattern, str[start:end])
          start = end
          end += 8
          (_v48.time,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (val4.stopTime,) = _get_struct_I().unpack(str[start:end])
          _v47.points.append(val4)
        _x = _v35
        start = end
        end += 9
        (_x.feasible, _x.fitness,) = _get_struct_Bd().unpack(str[start:end])
        _v35.feasible = bool(_v35.feasible)
        _v49 = _v35.t_firstCollision
        _x = _v49
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (_v35.i_subPopulation,) = _get_struct_b().unpack(str[start:end])
        _v50 = _v35.t_start
        _x = _v50
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.robot_radius, _x.currentTheta, _x.theta_cc,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.obstacle_trjs = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.RampTrajectory()
          _v51 = val2.header
          start = end
          end += 4
          (_v51.seq,) = _get_struct_I().unpack(str[start:end])
          _v52 = _v51.stamp
          _x = _v52
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v51.frame_id = str[start:end].decode('utf-8')
          else:
            _v51.frame_id = str[start:end]
          start = end
          end += 2
          (val2.id,) = _get_struct_H().unpack(str[start:end])
          _v53 = val2.trajectory
          _v54 = _v53.header
          start = end
          end += 4
          (_v54.seq,) = _get_struct_I().unpack(str[start:end])
          _v55 = _v54.stamp
          _x = _v55
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v54.frame_id = str[start:end].decode('utf-8')
          else:
            _v54.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v53.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            _v53.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v53.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.effort = struct.unpack(pattern, str[start:end])
            _v56 = val4.time_from_start
            _x = _v56
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v53.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sH'%length
          start = end
          end += struct.calcsize(pattern)
          val2.i_knotPoints = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.curves = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.BezierCurve()
            _v57 = val3.header
            start = end
            end += 4
            (_v57.seq,) = _get_struct_I().unpack(str[start:end])
            _v58 = _v57.stamp
            _x = _v58
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v57.frame_id = str[start:end].decode('utf-8')
            else:
              _v57.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.points = []
            for i in range(0, length):
              val4 = ramp_msgs.msg.MotionState()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.positions = struct.unpack(pattern, str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.velocities = struct.unpack(pattern, str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.accelerations = struct.unpack(pattern, str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.jerks = struct.unpack(pattern, str[start:end])
              start = end
              end += 8
              (val4.time,) = _get_struct_d().unpack(str[start:end])
              val3.points.append(val4)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.u_values = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.segmentPoints = []
            for i in range(0, length):
              val4 = ramp_msgs.msg.MotionState()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.positions = struct.unpack(pattern, str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.velocities = struct.unpack(pattern, str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.accelerations = struct.unpack(pattern, str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.jerks = struct.unpack(pattern, str[start:end])
              start = end
              end += 8
              (val4.time,) = _get_struct_d().unpack(str[start:end])
              val3.segmentPoints.append(val4)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.controlPoints = []
            for i in range(0, length):
              val4 = ramp_msgs.msg.MotionState()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.positions = struct.unpack(pattern, str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.velocities = struct.unpack(pattern, str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.accelerations = struct.unpack(pattern, str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.jerks = struct.unpack(pattern, str[start:end])
              start = end
              end += 8
              (val4.time,) = _get_struct_d().unpack(str[start:end])
              val3.controlPoints.append(val4)
            start = end
            end += 8
            (val3.l,) = _get_struct_d().unpack(str[start:end])
            _v59 = val3.ms_maxVA
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v59.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v59.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v59.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v59.jerks = struct.unpack(pattern, str[start:end])
            start = end
            end += 8
            (_v59.time,) = _get_struct_d().unpack(str[start:end])
            _v60 = val3.ms_initialVA
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v60.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v60.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v60.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v60.jerks = struct.unpack(pattern, str[start:end])
            start = end
            end += 8
            (_v60.time,) = _get_struct_d().unpack(str[start:end])
            _v61 = val3.ms_begin
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v61.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v61.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v61.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v61.jerks = struct.unpack(pattern, str[start:end])
            start = end
            end += 8
            (_v61.time,) = _get_struct_d().unpack(str[start:end])
            _x = val3
            start = end
            end += 32
            (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
            val2.curves.append(val3)
          _v62 = val2.holonomic_path
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v62.points = []
          for i in range(0, length):
            val4 = ramp_msgs.msg.KnotPoint()
            _v63 = val4.motionState
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v63.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v63.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v63.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v63.jerks = struct.unpack(pattern, str[start:end])
            start = end
            end += 8
            (_v63.time,) = _get_struct_d().unpack(str[start:end])
            start = end
            end += 4
            (val4.stopTime,) = _get_struct_I().unpack(str[start:end])
            _v62.points.append(val4)
          _x = val2
          start = end
          end += 9
          (_x.feasible, _x.fitness,) = _get_struct_Bd().unpack(str[start:end])
          val2.feasible = bool(val2.feasible)
          _v64 = val2.t_firstCollision
          _x = _v64
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val2.i_subPopulation,) = _get_struct_b().unpack(str[start:end])
          _v65 = val2.t_start
          _x = _v65
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          val1.obstacle_trjs.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.obstacle_cir_groups = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.CircleGroup()
          _v66 = val2.fitCir
          _v67 = _v66.center
          _x = _v67
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (_v66.radius,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.packedCirs = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.Circle()
            _v68 = val3.center
            _x = _v68
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            start = end
            end += 8
            (val3.radius,) = _get_struct_d().unpack(str[start:end])
            val2.packedCirs.append(val3)
          val1.obstacle_cir_groups.append(val2)
        _x = val1
        start = end
        end += 13
        (_x.imminent_collision, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible, _x.hmap_eval,) = _get_struct_Bd4B().unpack(str[start:end])
        val1.imminent_collision = bool(val1.imminent_collision)
        val1.full_eval = bool(val1.full_eval)
        val1.consider_trans = bool(val1.consider_trans)
        val1.trans_possible = bool(val1.trans_possible)
        val1.hmap_eval = bool(val1.hmap_eval)
        self.reqs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.reqs)
      buff.write(_struct_I.pack(length))
      for val1 in self.reqs:
        _v69 = val1.trajectory
        _v70 = _v69.header
        buff.write(_get_struct_I().pack(_v70.seq))
        _v71 = _v70.stamp
        _x = _v71
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v70.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_H().pack(_v69.id))
        _v72 = _v69.trajectory
        _v73 = _v72.header
        buff.write(_get_struct_I().pack(_v73.seq))
        _v74 = _v73.stamp
        _x = _v74
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v73.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v72.joint_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v72.joint_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.pack('<I%ss'%length, length, val4))
        length = len(_v72.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v72.points:
          length = len(val4.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.positions.tostring())
          length = len(val4.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.velocities.tostring())
          length = len(val4.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.accelerations.tostring())
          length = len(val4.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.effort.tostring())
          _v75 = val4.time_from_start
          _x = _v75
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(_v69.i_knotPoints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sH'%length
        buff.write(_v69.i_knotPoints.tostring())
        length = len(_v69.curves)
        buff.write(_struct_I.pack(length))
        for val3 in _v69.curves:
          _v76 = val3.header
          buff.write(_get_struct_I().pack(_v76.seq))
          _v77 = _v76.stamp
          _x = _v77
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v76.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.positions.tostring())
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.velocities.tostring())
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.accelerations.tostring())
            length = len(val4.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.jerks.tostring())
            buff.write(_get_struct_d().pack(val4.time))
          length = len(val3.u_values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.u_values.tostring())
          length = len(val3.segmentPoints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.segmentPoints:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.positions.tostring())
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.velocities.tostring())
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.accelerations.tostring())
            length = len(val4.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.jerks.tostring())
            buff.write(_get_struct_d().pack(val4.time))
          length = len(val3.controlPoints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.controlPoints:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.positions.tostring())
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.velocities.tostring())
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.accelerations.tostring())
            length = len(val4.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.jerks.tostring())
            buff.write(_get_struct_d().pack(val4.time))
          buff.write(_get_struct_d().pack(val3.l))
          _v78 = val3.ms_maxVA
          length = len(_v78.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v78.positions.tostring())
          length = len(_v78.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v78.velocities.tostring())
          length = len(_v78.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v78.accelerations.tostring())
          length = len(_v78.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v78.jerks.tostring())
          buff.write(_get_struct_d().pack(_v78.time))
          _v79 = val3.ms_initialVA
          length = len(_v79.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v79.positions.tostring())
          length = len(_v79.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v79.velocities.tostring())
          length = len(_v79.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v79.accelerations.tostring())
          length = len(_v79.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v79.jerks.tostring())
          buff.write(_get_struct_d().pack(_v79.time))
          _v80 = val3.ms_begin
          length = len(_v80.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v80.positions.tostring())
          length = len(_v80.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v80.velocities.tostring())
          length = len(_v80.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v80.accelerations.tostring())
          length = len(_v80.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v80.jerks.tostring())
          buff.write(_get_struct_d().pack(_v80.time))
          _x = val3
          buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
        _v81 = _v69.holonomic_path
        length = len(_v81.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v81.points:
          _v82 = val4.motionState
          length = len(_v82.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v82.positions.tostring())
          length = len(_v82.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v82.velocities.tostring())
          length = len(_v82.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v82.accelerations.tostring())
          length = len(_v82.jerks)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v82.jerks.tostring())
          buff.write(_get_struct_d().pack(_v82.time))
          buff.write(_get_struct_I().pack(val4.stopTime))
        _x = _v69
        buff.write(_get_struct_Bd().pack(_x.feasible, _x.fitness))
        _v83 = _v69.t_firstCollision
        _x = _v83
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_b().pack(_v69.i_subPopulation))
        _v84 = _v69.t_start
        _x = _v84
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.robot_radius, _x.currentTheta, _x.theta_cc))
        length = len(val1.obstacle_trjs)
        buff.write(_struct_I.pack(length))
        for val2 in val1.obstacle_trjs:
          _v85 = val2.header
          buff.write(_get_struct_I().pack(_v85.seq))
          _v86 = _v85.stamp
          _x = _v86
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v85.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_H().pack(val2.id))
          _v87 = val2.trajectory
          _v88 = _v87.header
          buff.write(_get_struct_I().pack(_v88.seq))
          _v89 = _v88.stamp
          _x = _v89
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v88.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v87.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v87.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.pack('<I%ss'%length, length, val4))
          length = len(_v87.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v87.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.positions.tostring())
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.velocities.tostring())
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.accelerations.tostring())
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.effort.tostring())
            _v90 = val4.time_from_start
            _x = _v90
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          length = len(val2.i_knotPoints)
          buff.write(_struct_I.pack(length))
          pattern = '<%sH'%length
          buff.write(val2.i_knotPoints.tostring())
          length = len(val2.curves)
          buff.write(_struct_I.pack(length))
          for val3 in val2.curves:
            _v91 = val3.header
            buff.write(_get_struct_I().pack(_v91.seq))
            _v92 = _v91.stamp
            _x = _v92
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v91.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            length = len(val3.points)
            buff.write(_struct_I.pack(length))
            for val4 in val3.points:
              length = len(val4.positions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.positions.tostring())
              length = len(val4.velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.velocities.tostring())
              length = len(val4.accelerations)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.accelerations.tostring())
              length = len(val4.jerks)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.jerks.tostring())
              buff.write(_get_struct_d().pack(val4.time))
            length = len(val3.u_values)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.u_values.tostring())
            length = len(val3.segmentPoints)
            buff.write(_struct_I.pack(length))
            for val4 in val3.segmentPoints:
              length = len(val4.positions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.positions.tostring())
              length = len(val4.velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.velocities.tostring())
              length = len(val4.accelerations)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.accelerations.tostring())
              length = len(val4.jerks)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.jerks.tostring())
              buff.write(_get_struct_d().pack(val4.time))
            length = len(val3.controlPoints)
            buff.write(_struct_I.pack(length))
            for val4 in val3.controlPoints:
              length = len(val4.positions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.positions.tostring())
              length = len(val4.velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.velocities.tostring())
              length = len(val4.accelerations)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.accelerations.tostring())
              length = len(val4.jerks)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val4.jerks.tostring())
              buff.write(_get_struct_d().pack(val4.time))
            buff.write(_get_struct_d().pack(val3.l))
            _v93 = val3.ms_maxVA
            length = len(_v93.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v93.positions.tostring())
            length = len(_v93.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v93.velocities.tostring())
            length = len(_v93.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v93.accelerations.tostring())
            length = len(_v93.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v93.jerks.tostring())
            buff.write(_get_struct_d().pack(_v93.time))
            _v94 = val3.ms_initialVA
            length = len(_v94.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v94.positions.tostring())
            length = len(_v94.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v94.velocities.tostring())
            length = len(_v94.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v94.accelerations.tostring())
            length = len(_v94.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v94.jerks.tostring())
            buff.write(_get_struct_d().pack(_v94.time))
            _v95 = val3.ms_begin
            length = len(_v95.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v95.positions.tostring())
            length = len(_v95.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v95.velocities.tostring())
            length = len(_v95.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v95.accelerations.tostring())
            length = len(_v95.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v95.jerks.tostring())
            buff.write(_get_struct_d().pack(_v95.time))
            _x = val3
            buff.write(_get_struct_4d().pack(_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target))
          _v96 = val2.holonomic_path
          length = len(_v96.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v96.points:
            _v97 = val4.motionState
            length = len(_v97.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v97.positions.tostring())
            length = len(_v97.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v97.velocities.tostring())
            length = len(_v97.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v97.accelerations.tostring())
            length = len(_v97.jerks)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(_v97.jerks.tostring())
            buff.write(_get_struct_d().pack(_v97.time))
            buff.write(_get_struct_I().pack(val4.stopTime))
          _x = val2
          buff.write(_get_struct_Bd().pack(_x.feasible, _x.fitness))
          _v98 = val2.t_firstCollision
          _x = _v98
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          buff.write(_get_struct_b().pack(val2.i_subPopulation))
          _v99 = val2.t_start
          _x = _v99
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.obstacle_cir_groups)
        buff.write(_struct_I.pack(length))
        for val2 in val1.obstacle_cir_groups:
          _v100 = val2.fitCir
          _v101 = _v100.center
          _x = _v101
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_d().pack(_v100.radius))
          length = len(val2.packedCirs)
          buff.write(_struct_I.pack(length))
          for val3 in val2.packedCirs:
            _v102 = val3.center
            _x = _v102
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            buff.write(_get_struct_d().pack(val3.radius))
        _x = val1
        buff.write(_get_struct_Bd4B().pack(_x.imminent_collision, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible, _x.hmap_eval))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.reqs is None:
        self.reqs = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reqs = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.EvaluationRequest()
        _v103 = val1.trajectory
        _v104 = _v103.header
        start = end
        end += 4
        (_v104.seq,) = _get_struct_I().unpack(str[start:end])
        _v105 = _v104.stamp
        _x = _v105
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v104.frame_id = str[start:end].decode('utf-8')
        else:
          _v104.frame_id = str[start:end]
        start = end
        end += 2
        (_v103.id,) = _get_struct_H().unpack(str[start:end])
        _v106 = _v103.trajectory
        _v107 = _v106.header
        start = end
        end += 4
        (_v107.seq,) = _get_struct_I().unpack(str[start:end])
        _v108 = _v107.stamp
        _x = _v108
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v107.frame_id = str[start:end].decode('utf-8')
        else:
          _v107.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v106.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8')
          else:
            val4 = str[start:end]
          _v106.joint_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v106.points = []
        for i in range(0, length):
          val4 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val4.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v109 = val4.time_from_start
          _x = _v109
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v106.points.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sH'%length
        start = end
        end += struct.calcsize(pattern)
        _v103.i_knotPoints = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v103.curves = []
        for i in range(0, length):
          val3 = ramp_msgs.msg.BezierCurve()
          _v110 = val3.header
          start = end
          end += 4
          (_v110.seq,) = _get_struct_I().unpack(str[start:end])
          _v111 = _v110.stamp
          _x = _v111
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v110.frame_id = str[start:end].decode('utf-8')
          else:
            _v110.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (val4.time,) = _get_struct_d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.u_values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.segmentPoints = []
          for i in range(0, length):
            val4 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (val4.time,) = _get_struct_d().unpack(str[start:end])
            val3.segmentPoints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.controlPoints = []
          for i in range(0, length):
            val4 = ramp_msgs.msg.MotionState()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (val4.time,) = _get_struct_d().unpack(str[start:end])
            val3.controlPoints.append(val4)
          start = end
          end += 8
          (val3.l,) = _get_struct_d().unpack(str[start:end])
          _v112 = val3.ms_maxVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v112.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v112.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v112.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v112.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v112.time,) = _get_struct_d().unpack(str[start:end])
          _v113 = val3.ms_initialVA
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v113.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v113.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v113.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v113.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v113.time,) = _get_struct_d().unpack(str[start:end])
          _v114 = val3.ms_begin
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v114.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v114.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v114.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v114.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v114.time,) = _get_struct_d().unpack(str[start:end])
          _x = val3
          start = end
          end += 32
          (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
          _v103.curves.append(val3)
        _v115 = _v103.holonomic_path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v115.points = []
        for i in range(0, length):
          val4 = ramp_msgs.msg.KnotPoint()
          _v116 = val4.motionState
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v116.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v116.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v116.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v116.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 8
          (_v116.time,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (val4.stopTime,) = _get_struct_I().unpack(str[start:end])
          _v115.points.append(val4)
        _x = _v103
        start = end
        end += 9
        (_x.feasible, _x.fitness,) = _get_struct_Bd().unpack(str[start:end])
        _v103.feasible = bool(_v103.feasible)
        _v117 = _v103.t_firstCollision
        _x = _v117
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (_v103.i_subPopulation,) = _get_struct_b().unpack(str[start:end])
        _v118 = _v103.t_start
        _x = _v118
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.robot_radius, _x.currentTheta, _x.theta_cc,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.obstacle_trjs = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.RampTrajectory()
          _v119 = val2.header
          start = end
          end += 4
          (_v119.seq,) = _get_struct_I().unpack(str[start:end])
          _v120 = _v119.stamp
          _x = _v120
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v119.frame_id = str[start:end].decode('utf-8')
          else:
            _v119.frame_id = str[start:end]
          start = end
          end += 2
          (val2.id,) = _get_struct_H().unpack(str[start:end])
          _v121 = val2.trajectory
          _v122 = _v121.header
          start = end
          end += 4
          (_v122.seq,) = _get_struct_I().unpack(str[start:end])
          _v123 = _v122.stamp
          _x = _v123
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v122.frame_id = str[start:end].decode('utf-8')
          else:
            _v122.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v121.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            _v121.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v121.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v124 = val4.time_from_start
            _x = _v124
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v121.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sH'%length
          start = end
          end += struct.calcsize(pattern)
          val2.i_knotPoints = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.curves = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.BezierCurve()
            _v125 = val3.header
            start = end
            end += 4
            (_v125.seq,) = _get_struct_I().unpack(str[start:end])
            _v126 = _v125.stamp
            _x = _v126
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v125.frame_id = str[start:end].decode('utf-8')
            else:
              _v125.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.points = []
            for i in range(0, length):
              val4 = ramp_msgs.msg.MotionState()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 8
              (val4.time,) = _get_struct_d().unpack(str[start:end])
              val3.points.append(val4)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.u_values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.segmentPoints = []
            for i in range(0, length):
              val4 = ramp_msgs.msg.MotionState()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 8
              (val4.time,) = _get_struct_d().unpack(str[start:end])
              val3.segmentPoints.append(val4)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.controlPoints = []
            for i in range(0, length):
              val4 = ramp_msgs.msg.MotionState()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              end += struct.calcsize(pattern)
              val4.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              start = end
              end += 8
              (val4.time,) = _get_struct_d().unpack(str[start:end])
              val3.controlPoints.append(val4)
            start = end
            end += 8
            (val3.l,) = _get_struct_d().unpack(str[start:end])
            _v127 = val3.ms_maxVA
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v127.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v127.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v127.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v127.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (_v127.time,) = _get_struct_d().unpack(str[start:end])
            _v128 = val3.ms_initialVA
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v128.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v128.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v128.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v128.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (_v128.time,) = _get_struct_d().unpack(str[start:end])
            _v129 = val3.ms_begin
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v129.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v129.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v129.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v129.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (_v129.time,) = _get_struct_d().unpack(str[start:end])
            _x = val3
            start = end
            end += 32
            (_x.u_0, _x.u_dot_0, _x.u_dot_max, _x.u_target,) = _get_struct_4d().unpack(str[start:end])
            val2.curves.append(val3)
          _v130 = val2.holonomic_path
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v130.points = []
          for i in range(0, length):
            val4 = ramp_msgs.msg.KnotPoint()
            _v131 = val4.motionState
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v131.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v131.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v131.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            _v131.jerks = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 8
            (_v131.time,) = _get_struct_d().unpack(str[start:end])
            start = end
            end += 4
            (val4.stopTime,) = _get_struct_I().unpack(str[start:end])
            _v130.points.append(val4)
          _x = val2
          start = end
          end += 9
          (_x.feasible, _x.fitness,) = _get_struct_Bd().unpack(str[start:end])
          val2.feasible = bool(val2.feasible)
          _v132 = val2.t_firstCollision
          _x = _v132
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val2.i_subPopulation,) = _get_struct_b().unpack(str[start:end])
          _v133 = val2.t_start
          _x = _v133
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          val1.obstacle_trjs.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.obstacle_cir_groups = []
        for i in range(0, length):
          val2 = ramp_msgs.msg.CircleGroup()
          _v134 = val2.fitCir
          _v135 = _v134.center
          _x = _v135
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (_v134.radius,) = _get_struct_d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.packedCirs = []
          for i in range(0, length):
            val3 = ramp_msgs.msg.Circle()
            _v136 = val3.center
            _x = _v136
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            start = end
            end += 8
            (val3.radius,) = _get_struct_d().unpack(str[start:end])
            val2.packedCirs.append(val3)
          val1.obstacle_cir_groups.append(val2)
        _x = val1
        start = end
        end += 13
        (_x.imminent_collision, _x.offset, _x.full_eval, _x.consider_trans, _x.trans_possible, _x.hmap_eval,) = _get_struct_Bd4B().unpack(str[start:end])
        val1.imminent_collision = bool(val1.imminent_collision)
        val1.full_eval = bool(val1.full_eval)
        val1.consider_trans = bool(val1.consider_trans)
        val1.trans_possible = bool(val1.trans_possible)
        val1.hmap_eval = bool(val1.hmap_eval)
        self.reqs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bd = None
def _get_struct_Bd():
    global _struct_Bd
    if _struct_Bd is None:
        _struct_Bd = struct.Struct("<Bd")
    return _struct_Bd
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_Bd4B = None
def _get_struct_Bd4B():
    global _struct_Bd4B
    if _struct_Bd4B is None:
        _struct_Bd4B = struct.Struct("<Bd4B")
    return _struct_Bd4B
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ramp_msgs/EvaluationSrvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import ramp_msgs.msg

class EvaluationSrvResponse(genpy.Message):
  _md5sum = "4c511a6bddace16490772be119d9e7d0"
  _type = "ramp_msgs/EvaluationSrvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
EvaluationResponse[] resps


================================================================================
MSG: ramp_msgs/EvaluationResponse
float64 fitness
bool feasible
duration t_firstCollision
"""
  __slots__ = ['resps']
  _slot_types = ['ramp_msgs/EvaluationResponse[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       resps

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvaluationSrvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.resps is None:
        self.resps = []
    else:
      self.resps = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.resps)
      buff.write(_struct_I.pack(length))
      for val1 in self.resps:
        _x = val1
        buff.write(_get_struct_dB().pack(_x.fitness, _x.feasible))
        _v137 = val1.t_firstCollision
        _x = _v137
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.resps is None:
        self.resps = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.resps = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.EvaluationResponse()
        _x = val1
        start = end
        end += 9
        (_x.fitness, _x.feasible,) = _get_struct_dB().unpack(str[start:end])
        val1.feasible = bool(val1.feasible)
        _v138 = val1.t_firstCollision
        _x = _v138
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.resps.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.resps)
      buff.write(_struct_I.pack(length))
      for val1 in self.resps:
        _x = val1
        buff.write(_get_struct_dB().pack(_x.fitness, _x.feasible))
        _v139 = val1.t_firstCollision
        _x = _v139
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.resps is None:
        self.resps = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.resps = []
      for i in range(0, length):
        val1 = ramp_msgs.msg.EvaluationResponse()
        _x = val1
        start = end
        end += 9
        (_x.fitness, _x.feasible,) = _get_struct_dB().unpack(str[start:end])
        val1.feasible = bool(val1.feasible)
        _v140 = val1.t_firstCollision
        _x = _v140
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.resps.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dB = None
def _get_struct_dB():
    global _struct_dB
    if _struct_dB is None:
        _struct_dB = struct.Struct("<dB")
    return _struct_dB
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
class EvaluationSrv(object):
  _type          = 'ramp_msgs/EvaluationSrv'
  _md5sum = 'bb14ee9ba2b91774273c2644f7a15381'
  _request_class  = EvaluationSrvRequest
  _response_class = EvaluationSrvResponse
